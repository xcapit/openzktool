# Next.js Web Application
#
# Multi-stage build for optimized production image
# Development mode available via docker-compose.dev.yml

# Stage 1: Dependencies
FROM node:18-alpine AS deps

LABEL maintainer="OpenZKTool <fboiero@frvm.utn.edu.ar>"
LABEL description="OpenZKTool Next.js web application"

RUN apk add --no-cache libc6-compat

WORKDIR /app

# Copy package files
COPY web/package.json web/package-lock.json* ./

# Install dependencies
RUN npm ci

# Stage 2: Builder
FROM node:18-alpine AS builder

WORKDIR /app

# Copy dependencies from deps stage
COPY --from=deps /app/node_modules ./node_modules

# Copy application code
COPY web/ ./

# Set environment variables for build
ENV NEXT_TELEMETRY_DISABLED=1
ENV NODE_ENV=production

# Build application
RUN npm run build

# Stage 3: Runner (Production)
FROM node:18-alpine AS runner

WORKDIR /app

ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

# Create non-root user
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nextjs

# Copy necessary files from builder
COPY --from=builder /app/public ./public
COPY --from=builder /app/.next/standalone ./
COPY --from=builder /app/.next/static ./.next/static

# Set correct permissions
RUN chown -R nextjs:nodejs /app

# Switch to non-root user
USER nextjs

# Expose port
EXPOSE 3000

ENV PORT=3000
ENV HOSTNAME="0.0.0.0"

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD node -e "require('http').get('http://localhost:3000/api/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"

# Start application
CMD ["node", "server.js"]

# Development stage (used in docker-compose.dev.yml)
FROM node:18-alpine AS dev

WORKDIR /app

RUN apk add --no-cache libc6-compat

COPY web/package*.json ./
RUN npm ci

COPY web/ ./

EXPOSE 3000

CMD ["npm", "run", "dev"]

# Usage:
# Production:
#   docker build -f docker/Dockerfile.web --target runner -t openzktool/web .
#   docker run -p 3000:3000 openzktool/web
#
# Development:
#   docker build -f docker/Dockerfile.web --target dev -t openzktool/web:dev .
#   docker run -p 3000:3000 -v $(pwd)/web:/app openzktool/web:dev
